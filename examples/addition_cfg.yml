# dbms: # TODO: is some smartness with tnsnames.ora possible (auto-populate)?
#   xob10:  # https://cx-oracle.readthedocs.io/en/latest/installation.html#quick-start-cx-oracle-installation
#     type: oracle  # using cx_Oracle python package
#     username: bla
#     password: blublu  # TODO might need to move pw out of config
#     host: hl-scan.office01.internalcorp.net  # IP address might work, too
#     port: 1521
#     service_name: xob10_prim.office01.internalcorp.net  # create dsn_tns, compare with tnsnames.ora: https://stackoverflow.com/questions/245465/cx-oracle-connecting-to-oracle-db-remotely
#     options: {}
#   bda:  # TODO check: https://dwgeek.com/guide-connecting-hiveserver2-using-python-pyhive.html/, https://stackoverflow.com/questions/21370431/how-to-access-hive-via-python
#     type: hive  # using pyhive.hive TODO: might need to use Impala
#     host: bda1node04  # maybe need to use IP?
#     port: 9083
#     auth_mechanism: PLAIN  # or CUSTOM? -- TODO: probably have to use Kerberos
#     user: myuser
#     password: secretpassword
#     database: default  # instead of changing here, use full table names in query
#     options: {}

# datasources:
  # l3.3:
  #   type: dbms  # type can also be: csv, euro_csv (european formatting), rawfile
  #   dbms: bda
  #   query: SELECT * FROM MYDB.MYTABLE WHERE BLA = :someparam AND BLU = :foobar # https://legacy.python.org/dev/peps/pep-0249/#paramstyle
  #   expires: 60*60*1  # -1: never, 0: immediately, >0: time in seconds. Choose 0 to disable caching.
  #   options: {}  # query options, NOT params
  #   tags: train, prod
  # klantcontact:
  #   type: dbms
  #   dbms: xob10
  #   query: SELECT * FROM MYSCHEMA.KLANTCONTACT WHERE X = :myparam # https://legacy.python.org/dev/peps/pep-0249/#paramstyle
  #   expires: 60*60*24  # -1: never, 0: immediately, >0: time in seconds. Choose 0 to disable caching.
  #   options: {}
  # first_names:
  #   type: euro_csv  # uses ; as separators and , as decimal point
  #   path: ./file.csv  # The string can also be a URL. Valid URL schemes include http, ftp, s3, and file.
  #   expires: -1  # -1: never (=cached forever), 0: immediately (=no caching), >0: time in seconds.
  #   options: {}
  #   tags: [train, test, predict]
  # petals:
  #   type: csv  # uses ; as separators and , as decimal point
  #   path: ./iris.csv  # The string can also be a URL. Valid URL schemes include http, ftp, s3, and file.
  #   expires: 0  # -1: never (=cached forever), 0: immediately (=no caching), >0: time in seconds.
  #   options: {}
  #   tags: train
  # petals_test:
  #   type: csv  # uses ; as separators and , as decimal point
  #   path: ./iris_holdout.csv  # The string can also be a URL. Valid URL schemes include http, ftp, s3, and file.
  #   expires: 0  # -1: never (=cached forever), 0: immediately (=no caching), >0: time in seconds.
  #   options: {}
  #   tags: [train, test]
  # old_tweets:
  #   type: csv
  #   path: sftp://username:password@someplace.org/file.csv  # TODO support sftp...
  #   expires: -1  # -1: never, 0: immediately, >0: time in seconds. Choose 0 to disable caching.
  #   options: {}
  # data sources can also be instantiated/subclassed and registered in code
  # (e.g. in cases of complex auth, for image recognition from a camera, audio streams, ...)


model_store:
  location: ./model_store  # TODO: maybe support sftp or other remote locations...

model:
  name: LameModel
  version: '0.0.1'  # use semantic versioning (<breaking>.<adding>.<fix>)
  module: examples.addition_model  # same as file name without .py
  train_options: {}
  predict_options: {}

api:
  resource_name: add  # name of the service api, also what comes in the URL after the first /
  version: '0.0.1'  # use semantic versioning (breaking.adding.fix), first segment will be used in url as .../vX
  users:  # this is TODO
    - name: muleuser
      password: soetnuh3g  # hashed, salted
    - name: testuser1
      password: 239pgupts
